init_str = """
import pandas as pd

import tensorflow as tf

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet import ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten
from tensorflow.keras.optimizers import Adam
"""

def load_train(path):
    
    """
    Carga la parte de entrenamiento del conjunto de datos desde la ruta.
    """
    
    train_datagen = ImageDataGenerator(validation_split=.25, 
                                       rescale=1/255, 
                                       horizontal_flip=True,
                                       vertical_flip=True,
                                       rotation_range=90,
                                       width_shift_range=.2,
                                       height_shift_range=.2
                                      )
    train_gen_flow = train_datagen.flow_from_dataframe(dataframe=labels,
                                                       directory='/datasets/faces/final_files/',
                                                       x_col='file_name',
                                                       y_col='real_age',
                                                       target_size=(224, 224),
                                                       batch_size=16,
                                                       subset='training',
                                                       class_mode='raw',
                                                       seed=12345
                                                      )
    
    return train_gen_flow

def load_test(path):
    
    """
    Carga la parte de validación/prueba del conjunto de datos desde la ruta
    """
    
    validation_datagen = ImageDataGenerator(validation_split=.25,
                                            rescale=1/255
                                           )
    val_gen_flow = validation_datagen.flow_from_dataframe(dataframe=labels,
                                                     directory='/datasets/faces/final_files/',
                                                     x_col='file_name',
                                                     y_col='real_age',
                                                     target_size=(224, 224),
                                                     subset='validation',
                                                     batch_size=16,
                                                     class_mode='raw',
                                                     seed=12345
                                                    )
    

    return val_gen_flow

def create_model(input_shape):
    
    """
    Define el modelo
    """
    
    backbone = ResNet50(input_shape=input_shape, weights='imagenet', include_top=False)
    
    for layer in backbone.layers:
        layer.trainable = False
    
    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(1, activation='relu'))
    
    optimizer = Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='mean_squared_error', metrics=['mse'])

    return model

def train_model(model, train_data, test_data, batch_size=None, epochs=20,
                steps_per_epoch=None, validation_steps=None):

    """
    Entrena el modelo dados los parámetros
    """
    
    model.fit(train_data,
             validation_data=test_data,
             batch_size=batch_size,
             epochs=epochs,
             steps_per_epoch=steps_per_epoch,
             validation_steps=validation_steps)

    return model


import inspect

with open('run_model_on_gpu.py', 'w') as f:
    
    f.write(init_str)
    f.write('\n\n')
        
    for fn_name in [load_train, load_test, create_model, train_model]:
        
        src = inspect.getsource(fn_name)
        f.write(src)
        f.write('\n\n')